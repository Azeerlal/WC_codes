% Alternative Carrier and Symbol Timing Synchronization in MATLAB
% Define parameters
11
Fs = 1e6; % Sampling Frequency (1 MHz)
Rs = 1e5; % Symbol Rate (100 kHz)
M = 4; % Modulation Order (QPSK)
SNR = 20; % Signal-to-Noise Ratio (dB
% Generate Random Data
numSymbols = 1000;
data = randi([0 M-1], numSymbols, 1);
% QPSK Modulation
modulatedSig = pskmod(data, M, pi/4);
% Simulate Channel Effects (AWGN + Frequency Offset + Timing Offset)
frequencyOffset = 500; % Hz
timingOffset = 0.1; % Fractional delay
timeVector = (0:length(modulatedSig)-1)' / Fs;
freqOffsetSig = modulatedSig .* exp(1j*2*pi*frequencyOffset*timeVector);
rxSig = awgn(freqOffsetSig, SNR, 'measured');
% Plot 1: Received Signal Before Synchronization
figure;
scatterplot(rxSig);
title('Received Signal Before Synchronization');
grid on;
% Carrier Synchronization using Phase-Locked Loop (PLL) Approximation
phzOffset = angle(sum(rxSig .* conj(modulatedSig))) / length(rxSig);
rxCarrierCorrected = rxSig .* exp(-1j * phzOffset);
% Symbol Timing Synchronization using Matched Filtering
matchedFilter = ones(4,1) / 4; % Simple averaging filter
rxFiltered = conv(rxCarrierCorrected, matchedFilter, 'same');
% Downsample to Symbol Rate
12
rxAligned = downsample(rxFiltered, 4, round(timingOffset * 4));
% Plot 2: Final Signal After Carrier and Symbol Timing Synchronization
figure;
scatterplot(rxAligned);
title('Final Signal After Carrier and Symbol Timing Synchronization');
grid on;
